<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[molon's dev]]></title>
  <link href="http://molon.me/atom.xml" rel="self"/>
  <link href="http://molon.me/"/>
  <updated>2014-03-29T22:24:16+08:00</updated>
  <id>http://molon.me/</id>
  <author>
    <name><![CDATA[molon]]></name>
    <email><![CDATA[dudl@qq.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[IOS推送的实现-远程通知]]></title>
    <link href="http://molon.me/2013/12/iostui-song-de-shi-xian-yuan-cheng-tong-zhi/"/>
    <updated>2013-12-27T05:46:58+08:00</updated>
    <id>http://molon.me/2013/12/iostui-song-de-shi-xian-yuan-cheng-tong-zhi</id>
    <content type="html"><![CDATA[<p>远程通知(即推送)的出现应该是由于苹果为了让APP后台时候一般不占用太多资源而创造的机制，像一般的IM系统，后台时候的聊天信息提醒就完全靠推送，实际上APP这时候应该是不做任何事情的。 <br/>
推送的机制：</p>

<ul>
<li>APP去向系统注册通知</li>
<li>系统接受到了之后会为这个硬件上的APP向APNS(即苹果的推送服务器)请求一个唯一标识符，即为device token，用来标识当前苹果网络上，这个硬件上的这个APP的唯一身份。</li>
<li>APNS把这个token传回给APP。</li>
<li>APP把token传给其自己的服务端，服务端记录这个token在数据库，一般会对其进行和用户绑定。</li>
<li>若需要推送信息到APP，则服务端向APNS请求推送某信息到某一token的硬件上。</li>
<li>APNS推送信息到对应硬件。</li>
</ul>


<h1>引用</h1>

<p><a href="http://www.raywenderlich.com/32960/apple-push-notification-services-in-ios-6-tutorial-part-1">Apple Push Notification Services in iOS 6 Tutorial: Part &frac12;</a> <br/>
<a href="http://www.raywenderlich.com/32963/apple-push-notification-services-in-ios-6-tutorial-part-2">Apple Push Notification Services in iOS 6 Tutorial: Part 2/2</a></p>

<h1>配置流程</h1>

<h2>推送证书的配置和安装</h2>

<p>参见笔者的另外一篇文章，<a href="http://molon.me/2013/12/ioskai-fa-zhe-zheng-shu-de-pei-zhi-he-an-zhuang/">IOS开发者证书的配置和安装</a></p>

<h2>推送服务端的配置</h2>

<h3>创建pem文件</h3>

<ul>
<li>打开命令行，cd进入存放有cer和p12的文件夹。</li>
<li>输入以下命令</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>openssl x509 -in aps_development.cer -inform der -out cer.pem 
</span><span class='line'>openssl pkcs12 -nocerts -out p12.pem -in MolonDevNotification.p12
</span><span class='line'>cat cer.pem p12.pem &gt; ck.pem
</span></code></pre></td></tr></table></div></figure>


<p>其中<code>aps_development.cer</code>和<code>MolonDevNotification.p12</code>根据实际名称来定。 <br/>
而第二个命令会让确认p12的导出密码，以及生成的pem对应使用密码。</p>

<ul>
<li>测试是否可用。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>openssl s_client -connect gateway.sandbox.push.apple.com:2195 -cert cer.pem -key p12.pem 
</span><span class='line'>#然后输入刚才设置的pem的密码即可</span></code></pre></td></tr></table></div></figure>


<p>若返回的是类似下图即表示可用 <br/>
<img src="http://molon.me/img/20131227/QQ20131227-40.png" alt="测试结果" /></p>

<h3>编写PHP请求推送代码</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Xcode控制台输出的Device Token</span>
</span><span class='line'><span class="c1">//这个玩意是直接要全都是十六进制的那种字符串，没有空格，没有&lt;&gt;符号</span>
</span><span class='line'><span class="nv">$deviceToken</span> <span class="o">=</span> <span class="s1">&#39;要接受消息的硬件的token&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 生成p12.pem时候设置的pem使用密码  </span>
</span><span class='line'><span class="nv">$passphrase</span> <span class="o">=</span> <span class="s1">&#39;pem密码&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 要推送的信息</span>
</span><span class='line'><span class="nv">$message</span> <span class="o">=</span> <span class="s1">&#39;你那么吊，你父母知道吗!&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">////////////////////////////////////////////////////////////////////////////////  </span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ctx</span> <span class="o">=</span> <span class="nb">stream_context_create</span><span class="p">();</span>
</span><span class='line'><span class="nb">stream_context_set_option</span><span class="p">(</span><span class="nv">$ctx</span><span class="p">,</span> <span class="s1">&#39;ssl&#39;</span><span class="p">,</span> <span class="s1">&#39;local_cert&#39;</span><span class="p">,</span> <span class="s1">&#39;ck.pem&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nb">stream_context_set_option</span><span class="p">(</span><span class="nv">$ctx</span><span class="p">,</span> <span class="s1">&#39;ssl&#39;</span><span class="p">,</span> <span class="s1">&#39;passphrase&#39;</span><span class="p">,</span> <span class="nv">$passphrase</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 和APNS建立一个连接，这里因为是开发者的，所以是sandbox下</span>
</span><span class='line'><span class="c1">// 正式版连接的服务器是ssl://gateway.push.apple.com:2195</span>
</span><span class='line'><span class="nv">$fp</span> <span class="o">=</span> <span class="nx">stream_socket_client</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;ssl://gateway.sandbox.push.apple.com:2195&#39;</span><span class="p">,</span> <span class="nv">$err</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">$errstr</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="nx">STREAM_CLIENT_CONNECT</span><span class="o">|</span><span class="nx">STREAM_CLIENT_PERSISTENT</span><span class="p">,</span> <span class="nv">$ctx</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$fp</span><span class="p">)</span>
</span><span class='line'>    <span class="k">exit</span><span class="p">(</span><span class="s2">&quot;Failed to connect: </span><span class="si">$err</span><span class="s2"> </span><span class="si">$errstr</span><span class="s2">&quot;</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">echo</span> <span class="s1">&#39;Connected to APNS&#39;</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Create the payload body  </span>
</span><span class='line'><span class="nv">$body</span><span class="p">[</span><span class="s1">&#39;aps&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;alert&#39;</span> <span class="o">=&gt;</span> <span class="nv">$message</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;sound&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;default&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;badge&#39;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Encode the payload as JSON  </span>
</span><span class='line'><span class="nv">$payload</span> <span class="o">=</span> <span class="nb">json_encode</span><span class="p">(</span><span class="nv">$body</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Build the binary notification  </span>
</span><span class='line'><span class="nv">$msg</span> <span class="o">=</span> <span class="nb">chr</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">.</span> <span class="nb">pack</span><span class="p">(</span><span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span> <span class="o">.</span> <span class="nb">pack</span><span class="p">(</span><span class="s1">&#39;H*&#39;</span><span class="p">,</span> <span class="nv">$deviceToken</span><span class="p">)</span> <span class="o">.</span> <span class="nb">pack</span><span class="p">(</span><span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="nb">strlen</span><span class="p">(</span><span class="nv">$payload</span><span class="p">))</span> <span class="o">.</span> <span class="nv">$payload</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Send it to the server  </span>
</span><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nb">fwrite</span><span class="p">(</span><span class="nv">$fp</span><span class="p">,</span> <span class="nv">$msg</span><span class="p">,</span> <span class="nb">strlen</span><span class="p">(</span><span class="nv">$msg</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$result</span><span class="p">)</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s1">&#39;Message not delivered&#39;</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s1">&#39;Message successfully delivered&#39;</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Close the connection to the server  </span>
</span><span class='line'><span class="nb">fclose</span><span class="p">(</span><span class="nv">$fp</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h2>编写App的代码</h2>

<h3>注册通知</h3>

<p>在<code>AppDelegate.m</code>里</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span> <span class="nf">didFinishLaunchingWithOptions:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">launchOptions</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 注册通知，把三种类型都注册了，用户允许的话，三个开关都会默认打开。</span>
</span><span class='line'>  <span class="p">[[</span><span class="n">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="nl">registerForRemoteNotificationTypes:</span>
</span><span class='line'>      <span class="p">(</span><span class="n">UIRemoteNotificationTypeBadge</span> <span class="o">|</span> <span class="n">UIRemoteNotificationTypeSound</span> <span class="o">|</span> <span class="n">UIRemoteNotificationTypeAlert</span><span class="p">)];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>接收devide token</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span> <span class="nf">didRegisterForRemoteNotificationsWithDeviceToken:</span><span class="p">(</span><span class="n">NSData</span> <span class="o">*</span><span class="p">)</span><span class="nv">deviceToken</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">token</span> <span class="o">=</span> <span class="n">deviceToken</span><span class="p">.</span><span class="n">description</span><span class="p">;</span>
</span><span class='line'>    <span class="n">token</span> <span class="o">=</span> <span class="p">[</span><span class="n">token</span> <span class="nl">stringByReplacingOccurrencesOfString:</span><span class="s">@&quot; &quot;</span> <span class="nl">withString:</span><span class="s">@&quot;&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">token</span> <span class="o">=</span> <span class="p">[</span><span class="n">token</span> <span class="nl">substringWithRange:</span><span class="n">NSMakeRange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">token</span><span class="p">.</span><span class="n">length</span><span class="o">-</span><span class="mi">2</span><span class="p">)];</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;token:%@&quot;</span><span class="p">,</span><span class="n">token</span><span class="p">);</span> <span class="c1">//这里的token就可以直接放到PHP的push文件里了。</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span> <span class="nf">didFailToRegisterForRemoteNotificationsWithError:</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="p">)</span><span class="nv">error</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;get token failed.&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>接收推送消息</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span> <span class="nf">didReceiveRemoteNotification:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">userInfo</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span><span class="n">userInfo</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>推送消息的结构</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">aps</span> <span class="o">=</span>     <span class="p">{</span>
</span><span class='line'>        <span class="n">alert</span> <span class="o">=</span> <span class="s">&quot;你那么吊，你父母知道吗!&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="n">badge</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="n">sound</span> <span class="o">=</span> <span class="k">default</span><span class="p">;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="n">info</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里是didReceiveRemoteNotification接收到的userInfo的结构，aps是系统用到的，必须要有，里面三个key分别对应<code>UIRemoteNotificationType</code>的<code>Alert</code>、<code>Badge</code>、<code>Sound</code>三种类型。而info是自定义添加的，想传啥传啥，但是也不是完全没限制，看下文php代码(结合上文完整php代码)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="c1">// Encode the payload as JSON  </span>
</span><span class='line'><span class="nv">$payload</span> <span class="o">=</span> <span class="nb">json_encode</span><span class="p">(</span><span class="nv">$body</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Build the binary notification  </span>
</span><span class='line'><span class="nv">$msg</span> <span class="o">=</span> <span class="nb">chr</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">.</span> <span class="nb">pack</span><span class="p">(</span><span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span> <span class="o">.</span> <span class="nb">pack</span><span class="p">(</span><span class="s1">&#39;H*&#39;</span><span class="p">,</span> <span class="nv">$deviceToken</span><span class="p">)</span> <span class="o">.</span> <span class="nb">pack</span><span class="p">(</span><span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="nb">strlen</span><span class="p">(</span><span class="nv">$payload</span><span class="p">))</span> <span class="o">.</span> <span class="nv">$payload</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意里面的<code>$payload</code>，他的长度不能大于256，如果大于，推送将不成功。</p>

<h2>自定义推送的声音</h2>

<p>在工程里添加声音文件，例如a.caf，b.mp3。然后推送消息体里&#8221;sound&#8221; ＝> &ldquo;a.caf&#8221;，即可。</p>

<h1>深入测试</h1>

<ul>
<li> 硬件里<code>设置-&gt;通知中心-&gt;应用名称</code>中<code>提醒样式、应用程序图标标记、声音</code>三个选项分别对应<code>UIRemoteNotificationType</code>的<code>Alert</code>、<code>Badge</code>、<code>Sound</code>三种类型，修改他们则对应的<code>enabledRemoteNotificationTypes</code>都会引起变化。若三者都被关闭，则变成<code>None</code>。</li>
<li> APP在安装到手机上，第一次调用<code>registerForRemoteNotificationTypes</code>方法的时候会询问用户是否允许接受其通知。如果用户允许，<code>enabledRemoteNotificationTypes</code>则为刚才注册的几个通知类型<em>相与</em>，否则会是<code>None</code>。拒绝通知其实并不表示APNs不会Push过来，只是不显示没动静罢了。</li>
<li> 当<code>None</code>时不管联网与否，<code>didRegisterForRemoteNotificationsWithDeviceToken</code>方法不会执行，而非<code>None</code>时，联网状态下会执行，但未联网状态下若以前曾执行过一次，也会执行并获取上一次返回的token。</li>
<li> 若第一次就注册通知时候就没联网，<code>didRegister...DeviceToken</code>和 <code>didFail...WithError</code>方法都不会执行。</li>
<li> 用户拒绝了通知，只能在适当的时候检测并且提示其手动去改正，无法再像第一次那样请求是否允许。</li>
<li> 用户未联网时候，服务端也可以成功发送请求到APNs，等待用户联网之后，APNs会即刻把消息Push进来，所以每个消息最好有代表发送时间的参数，以方便应用确认时间。</li>
<li> 推送可自定义的声音可以是mp3格式，时间可以挺长，并且多个推送过来的话，偶尔会重叠播放，只是偶尔。。</li>
<li> 应用删除之后不会接受到对应推送消息，但再次安装之后，还是会把没接的接过来，和没联网一个样。</li>
<li> 应用开启状态下，即使状态栏在拉下状态遮挡应用界面时候，也不会外部提醒，并且通知列表不会添加任何项。</li>
<li> 应用最小化和锁屏状态下，有消息进来会外部提醒，并且保存在状态栏下拉通知列表内。即使点击一项进入应用，此项也不会删除。</li>
<li> 服务端发送消息中如果一直不包含badge或者其为0，应用就再也无法控制顶部通知列表项的删除，当然如果不想着删除，就要保证程序内的同一条Push消息的重用后逻辑。</li>
<li> Push消息中包含大于0的badge，然后在<code>didReceiveRemoteNotification</code>方法里  <code>setApplicationIconBadgeNumber:0</code>即可让顶部通知列表中关于本应用的所有消息删除，很遗憾要删只能删除全部的。针对于必须设置为0才能删除其的问题，而这个方式很容易影响到应用内其他地方关于badge的逻辑，一般是在<code>setApplicationIconBadgeNumber:0</code>之后再重新判断逻辑set回来。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IOS开发者证书的配置和安装]]></title>
    <link href="http://molon.me/2013/12/ioskai-fa-zhe-zheng-shu-de-pei-zhi-he-an-zhuang/"/>
    <updated>2013-12-27T04:04:39+08:00</updated>
    <id>http://molon.me/2013/12/ioskai-fa-zhe-zheng-shu-de-pei-zhi-he-an-zhuang</id>
    <content type="html"><![CDATA[<h1>前提</h1>

<p>读者若没有购买Apple开发者资格的话，还请先做好这一步。<em>本文只针对开发版来解释，一些理论和想法全凭笔者的猜测，并不一定能套用在发布版上，请自行斟酌。</em></p>

<h2>设置和工具</h2>

<ul>
<li><a href="https://developer.apple.com/account/ios/certificate/certificateList.action">https://developer.apple.com/account/ios/certificate/certificateList.action</a>苹果开发者证书管理页面。</li>
<li>Finder &ndash;> 应用程序 &ndash;> 实用工具 &ndash;> 钥匙串访问</li>
</ul>


<h2>一些理论</h2>

<ul>
<li>Bundle Identifier，这个东西可以理解为是APP的唯一标识符，一般形式为com.companyName.appName。一部手机里一种标识符的APP只能存在一个，如果安装相同标识符的APP之前的会被覆盖。但是一般Apple会给每一位开发者分配一个唯一的标识符前缀(被称为Bundle Seed ID)，上架的APP实际的标识符一般形式为XXXX.com.companyName.appName。</li>
<li>不对称加密，公钥和私钥。简单来说，就是公钥加密的东西只有私钥才能解密，私钥加密的东西只有公钥才能解密，至于为什么，在下觉得这是数学家需要考虑的事，不必深究。而这样做的用途大概也可分为俩种：

<ul>
<li>A用私钥加密某文件发往其他处，有公钥的人解密之后获得文件就说明这文件必然是经了A手的，因为公钥能解密必定只有拥有私钥的A才有加密的资格，可以称之为电子签名。</li>
<li>B用公钥加密了某文件发给A，A用私钥解密获得文件。这样加密的文件就只有A能解密，因为只有A有私钥。</li>
</ul>
</li>
<li>Certificate(证书)，Certificate Authority(证书颁发机构)，Certificate Signing Request(CSR 证书签名请求文件)，Provisioning Profiles(配置概要文件，在开发版可以理解为appID，开发者证书，硬件三者绑定在一块的文件，而这个文件需要存在绑定的硬件里才能用其调试APP，算是苹果限制硬件调试用到的东西。)</li>
</ul>


<h2>大概流程和猜测</h2>

<p>开发者从Certificate Authority(证书颁发机构)申请一份CSR(证书签名请求文件)，申请成功之后会生成一个私钥在开发者机器上，将CSR上传到苹果那边，然后就会获得证书。
开发者在拥有私钥的机器上生成APP，即把APP通过私钥签名(即Code Signing)，并且指定了Provisioning Profile之后。用作调试的硬件会保存这个Profile，并且通过其中的证书存储的公钥解密验证开发者身份，以及其中的硬件ID验证自身是否具有调试资格。这样整个验证就打通了，即可真机调试。 <br/>
对于笔者而言，暂时了解那么多，已经足够了，若需要对其深入理解，请参看:<a href="http://www.cnblogs.com/andyque/archive/2011/08/30/2159086.html">iOS Code Signing: 解惑</a></p>

<h1>配置流程</h1>

<p>这里以开发者推送证书为例，完全无脑傻瓜图片教程。按步操作绝对不会出错。</p>

<h2>安装证书颁发机构</h2>

<p>其实我并不知道它到底有没有起作用，因为在申请CSR的时候并没有去指定选择它。</p>

<p><img src="http://molon.me/img/20131227/QQ20131227-01.png" alt="苹果证书颁发机构(Worldwide Developer Relations Certificate Authority)" /></p>

<p>如果钥匙串访问中未发现这个证书(即苹果证书颁发机构)，需要<a href="https://developer.apple.com/certificationauthority/AppleWWDRCA.cer">下载(苹果官方链接)</a>安装。</p>

<h2>申请CSR和保存私钥</h2>

<p>请记得阅读每张图片下面的标签。</p>

<p><img src="http://molon.me/img/20131227/QQ20131227-02.png" alt="申请CSR" /> <br/>
<img src="http://molon.me/img/20131227/QQ20131227-03.png" alt="保存到硬件，后缀为.certSigningRequest" /> <br/>
<img src="http://molon.me/img/20131227/QQ20131227-04.png" alt="钥匙串访问中可以看到私钥(专有密钥)和公钥" /> <br/>
<img src="http://molon.me/img/20131227/QQ20131227-05.png" alt="导出私钥，后缀为.p12" /> <br/>
<img src="http://molon.me/img/20131227/QQ20131227-06.png" alt="p12文件的密码，记录下以后要用到" /> <br/>
<img src="http://molon.me/img/20131227/QQ20131227-07.png" alt="当前Mac登录管理员的密码" /></p>

<p>这里面获取到的一份.certSigningRequest和.p12文件一定要保存好，前者可以重复传递给苹果获取一份新的证书，但证书虽新，它依然是对应同一个私钥，即p12，至于为什么要获取新证书，最大的原因就是因为所有的证书都是会过期的。而p12更应该保存好，因为全世界只有你一个人有，没有它证明不了你的身份。</p>

<h2>添加AppID</h2>

<p><img src="http://molon.me/img/20131227/QQ20131227-08.png" alt="添加AppID" /> <br/>
<img src="http://molon.me/img/20131227/QQ20131227-09.png" alt="设置名称以及其对应的Bundle ID" /> <br/>
这里选用Explicit App ID是因为有推送，内购，Game Center等其他功能的证书必须是明确的Bundle ID，不能是使用了通配符<code>*</code>的，Wildcard App ID则相反，但是其只能作为一般调试作用。看得懂英文的话看这篇:<a href="https://developer.apple.com/library/ios/qa/qa1713/_index.html">When should I use a wildcard App ID?</a> <br/>
<img src="http://molon.me/img/20131227/QQ20131227-10.png" alt="选择此App ID所需要的功能，这里选择推送" /> <br/>
这样就完成了App ID的添加。</p>

<h2>生成证书</h2>

<p><img src="http://molon.me/img/20131227/QQ20131227-11.png" alt="添加证书" /> <br/>
<img src="http://molon.me/img/20131227/QQ20131227-12.png" alt="选择开发者推送证书" /> <br/>
<img src="http://molon.me/img/20131227/QQ20131227-13.png" alt="这里是苹果提醒我们注意证书颁发机构这个东西，下面是我在上文给的链接" /> <br/>
<img src="http://molon.me/img/20131227/QQ20131227-14.png" alt="选择对应的AppID，推送证书只能选择有推送功能的AppID" /> <br/>
<img src="http://molon.me/img/20131227/QQ20131227-15.png" alt="上传申请的CSR文件" /> <br/>
<img src="http://molon.me/img/20131227/QQ20131227-16.png" alt="证书添加完毕，下载下来。后缀为.cer" /></p>

<h2>添加设备</h2>

<p><img src="http://molon.me/img/20131227/QQ20131227-37.png" alt="连接设备，找到其UDID" /> <br/>
<img src="http://molon.me/img/20131227/QQ20131227-38.png" alt="添加设备，设置名称和UDID" /></p>

<h2>添加配置概要文件</h2>

<p><img src="http://molon.me/img/20131227/QQ20131227-17.png" alt="添加PP(姑且认为是简称)" /> <br/>
<img src="http://molon.me/img/20131227/QQ20131227-18.png" alt="选择开发版" /><br/>
<img src="http://molon.me/img/20131227/QQ20131227-19.png" alt="选择App ID" /><br/>
<img src="http://molon.me/img/20131227/QQ20131227-20.png" alt="选择证书" /><br/>
<img src="http://molon.me/img/20131227/QQ20131227-21.png" alt="选择设备" /><br/>
<img src="http://molon.me/img/20131227/QQ20131227-22.png" alt="设置名称并且生成文件，下载下来，后缀为.mobileprovision" /></p>

<h2>具体用途</h2>

<p><img src="http://molon.me/img/20131227/QQ20131227-23.png" alt="最后获得的4个文件" /></p>

<ul>
<li>.p12和.certSigningRequest文件在上面已经说过了，保存下来会有用的。.p12在配置推送的服务端的时候也会用到，在其他文章里会说。</li>
<li>.cer文件一般直接打开安装到本机机器。</li>
<li>.mobileprovision文件也是直接打开，XCode会对其进行记录处理。</li>
</ul>


<p>下面是.cer和.mobileprovision的具体用处。 <br/>
<img src="http://molon.me/img/20131227/QQ20131227-31.png" alt="建立工程需AppID对应的Bundle ID" /><br/>
<img src="http://molon.me/img/20131227/QQ20131227-32.png" alt="Code Signing选择配置的证书，证书需要安装了才显示" /><br/>
<img src="http://molon.me/img/20131227/QQ20131227-33.png" alt="安装了.mobileprovision文件之后这里才可以选择" /><br/>
<img src="http://molon.me/img/20131227/QQ20131227-34.png" alt="一般只要调试运行过一次，手机里自然会保存这个PP" /><br/>
<img src="http://molon.me/img/20131227/QQ20131227-35.png" alt="如果没保存，有异常情况，这里可以直接拖过去" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何在Mac下配置Github的SSH]]></title>
    <link href="http://molon.me/2013/12/ru-he-zai-ben-ji-pei-zhi-githubde-ssh/"/>
    <updated>2013-12-25T03:18:52+08:00</updated>
    <id>http://molon.me/2013/12/ru-he-zai-ben-ji-pei-zhi-githubde-ssh</id>
    <content type="html"><![CDATA[<p>将SSH配置好之后，以后在本机访问github就再也不需要输入密码了。</p>

<h2>设置Github的用户名和邮箱</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git config --global user.name "你在Github上的昵称"
</span><span class='line'>git config --global user.email "你在Github上的邮箱"</span></code></pre></td></tr></table></div></figure>


<h2>生成SSH密钥过程</h2>

<h3>查看是否已经有了SSH密钥</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd ~/.ssh</span></code></pre></td></tr></table></div></figure>


<p>如果没有密钥则不会有此文件夹，有则备份删除</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cp -R ~/.ssh ~/.ssh_bak
</span><span class='line'>rm -R ~/.ssh  </span></code></pre></td></tr></table></div></figure>


<h3>生成密钥</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh-keygen -t rsa -C "你在Github上的邮箱"</span></code></pre></td></tr></table></div></figure>


<p>第一次要输入file名字，直接回车即可，默认文件名为<code>id_</code>前缀，然后会被要求输入个密码并且确认。</p>

<h3>添加密钥到SSH</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd ~/.ssh
</span><span class='line'>ssh-add id_rsa</span></code></pre></td></tr></table></div></figure>


<p>需要刚才生成密钥时候输入的密码。</p>

<h3>在github上添加SSH Key</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>more id_rsa.pub</span></code></pre></td></tr></table></div></figure>


<ul>
<li>查看公钥里的内容并且全部复制下来(包括开头ssh-rsa和结尾邮箱)。</li>
<li>进入到github的setting，找到SSH Keys页面添加一个key，title随意，赋值公钥进去保存即可。</li>
</ul>


<h3>测试是否成功</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh git@github.com</span></code></pre></td></tr></table></div></figure>


<p>成功则返回类似:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Hi molon! You've successfully authenticated, but GitHub does not provide shell access.
</span><span class='line'>Connection to github.com closed.</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress安装和使用]]></title>
    <link href="http://molon.me/2013/12/octopressan-zhuang-he-shi-yong/"/>
    <updated>2013-12-24T16:28:41+08:00</updated>
    <id>http://molon.me/2013/12/octopressan-zhuang-he-shi-yong</id>
    <content type="html"><![CDATA[<h2>前提</h2>

<p>本文是以Mac安装为前提的，其他系统请自行选取合适自己的尝试。</p>

<h2>安装组件</h2>

<h3>安装rvm</h3>

<p>注意安装RVM需要XCode的CommandLineTools组件，所以需要自行解决这个东西先。 <br/>
其他关于rvm的一些问题请参考:<a href="http://ruby-china.org/wiki/rvm-guide">http://ruby-china.org/wiki/rvm-guide</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rvm -v</span></code></pre></td></tr></table></div></figure>


<p>如果发现已经安装了rvm，则无需自行安装它。默认我的Mac OSX 10.9.2是安装了的。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -L get.rvm.io | bash -s stable
</span><span class='line'>source ~/.bashrc
</span><span class='line'>source ~/.bash_profile
</span><span class='line'>
</span><span class='line'>sed -i -e 's/ftp\.ruby-lang\.org\/pub\/ruby/ruby\.taobao\.org\/mirrors\/ruby/g' ~/.rvm/config/db</span></code></pre></td></tr></table></div></figure>


<ul>
<li>前三行是下载安装rvm，然后会自动下载安装ruby最新版，然后会自动下载安装rubygems最新版(根据命令行返回结果显示，如果这些都做了的话，下一步可以省略。)</li>
<li>第四行是修改rvm的下载源，否则国内访问这些资源超级慢的。</li>
</ul>


<h3>安装ruby和rubygems</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ruby -v</span></code></pre></td></tr></table></div></figure>


<p>这个命令下即使发现默认Mac已经安装了也应该使用rvm安装一次最新版本的或者其他版本。因为Mac系统下的ruby，我使用<code>rvm list</code>发现并不会显示它，然后直接使用会引起一系列的问题。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rvm install 1.9.3 #只是最少1.9.3，以上版本亦可
</span><span class='line'>rvm use 1.9.3 --default
</span><span class='line'>rvm rubygems latest
</span><span class='line'>ruby --version</span></code></pre></td></tr></table></div></figure>


<p>如果以后遇到了一些问题，首先就要确认是不是<code>ruby</code>和<code>rake</code>(在下面<strong>生成和预览</strong>下有提到)的版本问题。<code>ruby --version</code>用来检查版本最低是1.9.3，如果不是则使用<code>rvm use 1.9.3</code>切换当前有效ruby，不建议卸载系统自带的版本，可能会引起其他诸多问题。<code>Mac 10.9.2下发现1.9.3安装很久很久并且最终失败，不知是不是网络问题。然后换成安装最新的2.1版本安装成功</code></p>

<h3>配置rubygems</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem sources -r https://rubygems.org/
</span><span class='line'>gem sources -a http://ruby.taobao.org/
</span><span class='line'>gem sources -l</span></code></pre></td></tr></table></div></figure>


<p><code>gem sources -l</code>用来确认gem的资源URL是否只有<a href="http://ruby.taobao.org">http://ruby.taobao.org</a>，也是一个国内的资源镜像。</p>

<h2>安装Octopress</h2>

<h3>从Git获取源码</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'>cd octopress</span></code></pre></td></tr></table></div></figure>


<h3>安装Bundler</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install bundler
</span><span class='line'>bundle install</span></code></pre></td></tr></table></div></figure>


<h3>安装Octopress默认主题</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake install</span></code></pre></td></tr></table></div></figure>


<h3>生成和预览</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake generate
</span><span class='line'>rake preview</span></code></pre></td></tr></table></div></figure>


<p>预览时在命令行Ctrl+C退出预览。 <br/>
<strong>第一次应该不会，但是以后如果遇到了显示rake版本不对的问题。可能是因为有两个rake版本存在，可以使用<code>gem unstall rake</code>，然后选择一个不需要的版本卸载即可</strong></p>

<h2>简单使用</h2>

<h3>安装其他主题</h3>

<p>把主题文件夹下载下来，放在根目录，例如名字是叫XXX</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cp -R XXX .themes/XXX
</span><span class='line'>rake "install[XXX]" #以前有主题则需要输入y/n来确认
</span><span class='line'>rake generate
</span><span class='line'>rake preview #开启预览</span></code></pre></td></tr></table></div></figure>


<ul>
<li>第一行命令是把源码复制到.themes隐藏文件夹里。</li>
<li>其实只要开一个命令行<code>rake preview</code>，不停止。然后再开一个命令行做添加文章，修改样式还有界面，修改主题等等rake方面的操作是可以的。可以认为<code>rake preview</code>是打开了一个Web服务器，并且其可以监视一些文件改动并做处理。</li>
<li>至于安装主题模板其实就是把.themes里的一些东西赋值到根目录的sass和source文件夹里。一般主题安装完还是需要自定义修改一些东西(在根目录下的修改)，修改完了之后把sass和source文件夹里的东西备份下来(不包含_post或者其他自己添加的文件夹)，就可以作为模板备份，即使以后需要重装，安装备份的模板就可以。</li>
</ul>


<h3>基本设置</h3>

<ul>
<li>基本的一些博客标题还有个人信息的设置在_config.yml里，<strong>需要注意的是每个设置的<code>:</code>号后面需要有个空格</strong>，否则会出问题。</li>
<li>设置的具体含义不做解释了，但是像里面的一些对第三方东西例如facebook，tweet等等国内访问有问题一般笔者都是直接设置为false的，否则会引起页面加载特别不流畅。</li>
<li>若要自定义一些页面内容细节，在source文件夹里找到对应页面，&#8220;就标识_config.yml里XXXXX设置的内容，可以自定义一些设置。</li>
</ul>


<h3>发布文章</h3>

<ul>
<li><code>rake new_post['文章标题']</code>此命令即可在source的_post文件夹下面添加一个markdown文件。</li>
<li>打开markdown文件添加内容保存即可在浏览器预览页面看到新文章信息，注意头部文章标题和时间等等信息，这是网站所需要的，不能删除。</li>
<li>markdown编辑器:<a href="http://www.mouapp.com/">Mou(非网页)</a>，<a href="http://maxiang.info/">马克飞象</a>，<a href="http://mahua.jser.me/">MaHua</a></li>
</ul>


<h3>添加页面</h3>

<ul>
<li><code>rake new_page['img']</code>此命令在source文件夹下添加一个名为img的文件夹。</li>
<li>一般笔者是添加一个名为img的文件夹，然后把所有的图片资源都放到里面。而markdown编辑下添加图片的地方用/img/XXX.jpg即可。</li>
</ul>


<h3>发布到Github</h3>

<ul>
<li>在Github下建议个名为XXX.github.com的Repository。</li>
<li>运行<code>rake setup_github_pages</code>，它会提示你输入你的github的库地址，例如：git@github.com:yourname/XXX.github.com.git</li>
<li>运行<code>rake generate</code>生成静态页面，<code>rake deploy</code>部署到github上。</li>
<li>如果deploy失败，查看错误消息。

<ul>
<li>没有访问github的权限，查看笔者的另外一篇文章<a href="http://molon.me/2013/12/ru-he-zai-ben-ji-pei-zhi-githubde-ssh/">如何在Mac下配置Github的SSH</a></li>
<li>需要先pull下来，然后才能push，一般这种情况我都是在github上删了仓库重新建个空的，然后deploy。</li>
</ul>
</li>
</ul>


<p>其实部署到网络的只有public文件夹的所有内容(也就是<code>rake generate</code>命令生成的内容)，如果你有其他的空间，例如BAE，你也可以将public文件夹里的内容放到其上，同样可以访问，只要能运行html文件的地方，BAE的话需要设置app.conf里的主页为index.html。PS:<code>rake deploy</code>命令不可用于除了Github和Heroku外的其他空间。</p>

<h3>Github自定义域名</h3>

<ul>
<li>在source根目录下建议一个文件CNAME(无后缀),里面只写一行即为你的域名无前缀，例如molon.me</li>
<li>笔者是使用的<a href="http://DNSPod.cn">DNSPod</a>作为域名解析服务器，对域名这块不甚了解，一张图解释设置。 <br/>
<img src="http://molon.me/img/github_dnspod_setting.png" alt="github_dnspod_setting" /></li>
</ul>

]]></content>
  </entry>
  
</feed>
